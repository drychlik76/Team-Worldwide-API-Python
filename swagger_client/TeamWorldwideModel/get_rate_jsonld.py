# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetRateJsonld(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfGetRateJsonldContext',
        'id': 'str',
        'type': 'str',
        'unique_id': 'str',
        'origin_city': 'str',
        'origin_state': 'str',
        'origin_zip_code': 'str',
        'origin_country': 'str',
        'destination_city': 'str',
        'destination_state': 'str',
        'destination_zip_code': 'str',
        'destination_country': 'str',
        'freight': 'list[FreightJsonld]',
        'unit_of_measure': 'str',
        'team_book_accessorials': 'list[str]',
        'pickup_date': 'datetime',
        'rate_type_list': 'list[str]',
        'equipment': 'str',
        'insurance_add_on': 'bool',
        'insure_freight': 'bool',
        'insurance_amount': 'float',
        'linear_feet': 'float'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'unique_id': 'uniqueId',
        'origin_city': 'originCity',
        'origin_state': 'originState',
        'origin_zip_code': 'originZipCode',
        'origin_country': 'originCountry',
        'destination_city': 'destinationCity',
        'destination_state': 'destinationState',
        'destination_zip_code': 'destinationZipCode',
        'destination_country': 'destinationCountry',
        'freight': 'freight',
        'unit_of_measure': 'unitOfMeasure',
        'team_book_accessorials': 'teamBookAccessorials',
        'pickup_date': 'pickupDate',
        'rate_type_list': 'rateTypeList',
        'equipment': 'equipment',
        'insurance_add_on': 'insuranceAddOn',
        'insure_freight': 'insureFreight',
        'insurance_amount': 'insuranceAmount',
        'linear_feet': 'linearFeet'
    }

    def __init__(self, context=None, id=None, type=None, unique_id=None, origin_city=None, origin_state=None, origin_zip_code=None, origin_country=None, destination_city=None, destination_state=None, destination_zip_code=None, destination_country=None, freight=None, unit_of_measure='US', team_book_accessorials=None, pickup_date=None, rate_type_list=None, equipment=None, insurance_add_on=None, insure_freight=None, insurance_amount=None, linear_feet=None):  # noqa: E501
        """GetRateJsonld - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._unique_id = None
        self._origin_city = None
        self._origin_state = None
        self._origin_zip_code = None
        self._origin_country = None
        self._destination_city = None
        self._destination_state = None
        self._destination_zip_code = None
        self._destination_country = None
        self._freight = None
        self._unit_of_measure = None
        self._team_book_accessorials = None
        self._pickup_date = None
        self._rate_type_list = None
        self._equipment = None
        self._insurance_add_on = None
        self._insure_freight = None
        self._insurance_amount = None
        self._linear_feet = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if unique_id is not None:
            self.unique_id = unique_id
        self.origin_city = origin_city
        self.origin_state = origin_state
        self.origin_zip_code = origin_zip_code
        self.origin_country = origin_country
        self.destination_city = destination_city
        self.destination_state = destination_state
        self.destination_zip_code = destination_zip_code
        self.destination_country = destination_country
        self.freight = freight
        self.unit_of_measure = unit_of_measure
        if team_book_accessorials is not None:
            self.team_book_accessorials = team_book_accessorials
        if pickup_date is not None:
            self.pickup_date = pickup_date
        if rate_type_list is not None:
            self.rate_type_list = rate_type_list
        if equipment is not None:
            self.equipment = equipment
        if insurance_add_on is not None:
            self.insurance_add_on = insurance_add_on
        if insure_freight is not None:
            self.insure_freight = insure_freight
        if insurance_amount is not None:
            self.insurance_amount = insurance_amount
        if linear_feet is not None:
            self.linear_feet = linear_feet

    @property
    def context(self):
        """Gets the context of this GetRateJsonld.  # noqa: E501


        :return: The context of this GetRateJsonld.  # noqa: E501
        :rtype: OneOfGetRateJsonldContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this GetRateJsonld.


        :param context: The context of this GetRateJsonld.  # noqa: E501
        :type: OneOfGetRateJsonldContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this GetRateJsonld.  # noqa: E501


        :return: The id of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetRateJsonld.


        :param id: The id of this GetRateJsonld.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this GetRateJsonld.  # noqa: E501


        :return: The type of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetRateJsonld.


        :param type: The type of this GetRateJsonld.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unique_id(self):
        """Gets the unique_id of this GetRateJsonld.  # noqa: E501


        :return: The unique_id of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this GetRateJsonld.


        :param unique_id: The unique_id of this GetRateJsonld.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def origin_city(self):
        """Gets the origin_city of this GetRateJsonld.  # noqa: E501


        :return: The origin_city of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._origin_city

    @origin_city.setter
    def origin_city(self, origin_city):
        """Sets the origin_city of this GetRateJsonld.


        :param origin_city: The origin_city of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if origin_city is None:
            raise ValueError("Invalid value for `origin_city`, must not be `None`")  # noqa: E501

        self._origin_city = origin_city

    @property
    def origin_state(self):
        """Gets the origin_state of this GetRateJsonld.  # noqa: E501


        :return: The origin_state of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._origin_state

    @origin_state.setter
    def origin_state(self, origin_state):
        """Sets the origin_state of this GetRateJsonld.


        :param origin_state: The origin_state of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if origin_state is None:
            raise ValueError("Invalid value for `origin_state`, must not be `None`")  # noqa: E501

        self._origin_state = origin_state

    @property
    def origin_zip_code(self):
        """Gets the origin_zip_code of this GetRateJsonld.  # noqa: E501


        :return: The origin_zip_code of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._origin_zip_code

    @origin_zip_code.setter
    def origin_zip_code(self, origin_zip_code):
        """Sets the origin_zip_code of this GetRateJsonld.


        :param origin_zip_code: The origin_zip_code of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if origin_zip_code is None:
            raise ValueError("Invalid value for `origin_zip_code`, must not be `None`")  # noqa: E501

        self._origin_zip_code = origin_zip_code

    @property
    def origin_country(self):
        """Gets the origin_country of this GetRateJsonld.  # noqa: E501


        :return: The origin_country of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this GetRateJsonld.


        :param origin_country: The origin_country of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if origin_country is None:
            raise ValueError("Invalid value for `origin_country`, must not be `None`")  # noqa: E501

        self._origin_country = origin_country

    @property
    def destination_city(self):
        """Gets the destination_city of this GetRateJsonld.  # noqa: E501


        :return: The destination_city of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._destination_city

    @destination_city.setter
    def destination_city(self, destination_city):
        """Sets the destination_city of this GetRateJsonld.


        :param destination_city: The destination_city of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if destination_city is None:
            raise ValueError("Invalid value for `destination_city`, must not be `None`")  # noqa: E501

        self._destination_city = destination_city

    @property
    def destination_state(self):
        """Gets the destination_state of this GetRateJsonld.  # noqa: E501


        :return: The destination_state of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._destination_state

    @destination_state.setter
    def destination_state(self, destination_state):
        """Sets the destination_state of this GetRateJsonld.


        :param destination_state: The destination_state of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if destination_state is None:
            raise ValueError("Invalid value for `destination_state`, must not be `None`")  # noqa: E501

        self._destination_state = destination_state

    @property
    def destination_zip_code(self):
        """Gets the destination_zip_code of this GetRateJsonld.  # noqa: E501


        :return: The destination_zip_code of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._destination_zip_code

    @destination_zip_code.setter
    def destination_zip_code(self, destination_zip_code):
        """Sets the destination_zip_code of this GetRateJsonld.


        :param destination_zip_code: The destination_zip_code of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if destination_zip_code is None:
            raise ValueError("Invalid value for `destination_zip_code`, must not be `None`")  # noqa: E501

        self._destination_zip_code = destination_zip_code

    @property
    def destination_country(self):
        """Gets the destination_country of this GetRateJsonld.  # noqa: E501


        :return: The destination_country of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._destination_country

    @destination_country.setter
    def destination_country(self, destination_country):
        """Sets the destination_country of this GetRateJsonld.


        :param destination_country: The destination_country of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if destination_country is None:
            raise ValueError("Invalid value for `destination_country`, must not be `None`")  # noqa: E501

        self._destination_country = destination_country

    @property
    def freight(self):
        """Gets the freight of this GetRateJsonld.  # noqa: E501


        :return: The freight of this GetRateJsonld.  # noqa: E501
        :rtype: list[FreightJsonld]
        """
        return self._freight

    @freight.setter
    def freight(self, freight):
        """Sets the freight of this GetRateJsonld.


        :param freight: The freight of this GetRateJsonld.  # noqa: E501
        :type: list[FreightJsonld]
        """
        if freight is None:
            raise ValueError("Invalid value for `freight`, must not be `None`")  # noqa: E501

        self._freight = freight

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this GetRateJsonld.  # noqa: E501


        :return: The unit_of_measure of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this GetRateJsonld.


        :param unit_of_measure: The unit_of_measure of this GetRateJsonld.  # noqa: E501
        :type: str
        """
        if unit_of_measure is None:
            raise ValueError("Invalid value for `unit_of_measure`, must not be `None`")  # noqa: E501

        self._unit_of_measure = unit_of_measure

    @property
    def team_book_accessorials(self):
        """Gets the team_book_accessorials of this GetRateJsonld.  # noqa: E501

        Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.  # noqa: E501

        :return: The team_book_accessorials of this GetRateJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._team_book_accessorials

    @team_book_accessorials.setter
    def team_book_accessorials(self, team_book_accessorials):
        """Sets the team_book_accessorials of this GetRateJsonld.

        Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.  # noqa: E501

        :param team_book_accessorials: The team_book_accessorials of this GetRateJsonld.  # noqa: E501
        :type: list[str]
        """

        self._team_book_accessorials = team_book_accessorials

    @property
    def pickup_date(self):
        """Gets the pickup_date of this GetRateJsonld.  # noqa: E501


        :return: The pickup_date of this GetRateJsonld.  # noqa: E501
        :rtype: datetime
        """
        return self._pickup_date

    @pickup_date.setter
    def pickup_date(self, pickup_date):
        """Sets the pickup_date of this GetRateJsonld.


        :param pickup_date: The pickup_date of this GetRateJsonld.  # noqa: E501
        :type: datetime
        """

        self._pickup_date = pickup_date

    @property
    def rate_type_list(self):
        """Gets the rate_type_list of this GetRateJsonld.  # noqa: E501


        :return: The rate_type_list of this GetRateJsonld.  # noqa: E501
        :rtype: list[str]
        """
        return self._rate_type_list

    @rate_type_list.setter
    def rate_type_list(self, rate_type_list):
        """Sets the rate_type_list of this GetRateJsonld.


        :param rate_type_list: The rate_type_list of this GetRateJsonld.  # noqa: E501
        :type: list[str]
        """

        self._rate_type_list = rate_type_list

    @property
    def equipment(self):
        """Gets the equipment of this GetRateJsonld.  # noqa: E501


        :return: The equipment of this GetRateJsonld.  # noqa: E501
        :rtype: str
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this GetRateJsonld.


        :param equipment: The equipment of this GetRateJsonld.  # noqa: E501
        :type: str
        """

        self._equipment = equipment

    @property
    def insurance_add_on(self):
        """Gets the insurance_add_on of this GetRateJsonld.  # noqa: E501


        :return: The insurance_add_on of this GetRateJsonld.  # noqa: E501
        :rtype: bool
        """
        return self._insurance_add_on

    @insurance_add_on.setter
    def insurance_add_on(self, insurance_add_on):
        """Sets the insurance_add_on of this GetRateJsonld.


        :param insurance_add_on: The insurance_add_on of this GetRateJsonld.  # noqa: E501
        :type: bool
        """

        self._insurance_add_on = insurance_add_on

    @property
    def insure_freight(self):
        """Gets the insure_freight of this GetRateJsonld.  # noqa: E501


        :return: The insure_freight of this GetRateJsonld.  # noqa: E501
        :rtype: bool
        """
        return self._insure_freight

    @insure_freight.setter
    def insure_freight(self, insure_freight):
        """Sets the insure_freight of this GetRateJsonld.


        :param insure_freight: The insure_freight of this GetRateJsonld.  # noqa: E501
        :type: bool
        """

        self._insure_freight = insure_freight

    @property
    def insurance_amount(self):
        """Gets the insurance_amount of this GetRateJsonld.  # noqa: E501


        :return: The insurance_amount of this GetRateJsonld.  # noqa: E501
        :rtype: float
        """
        return self._insurance_amount

    @insurance_amount.setter
    def insurance_amount(self, insurance_amount):
        """Sets the insurance_amount of this GetRateJsonld.


        :param insurance_amount: The insurance_amount of this GetRateJsonld.  # noqa: E501
        :type: float
        """

        self._insurance_amount = insurance_amount

    @property
    def linear_feet(self):
        """Gets the linear_feet of this GetRateJsonld.  # noqa: E501


        :return: The linear_feet of this GetRateJsonld.  # noqa: E501
        :rtype: float
        """
        return self._linear_feet

    @linear_feet.setter
    def linear_feet(self, linear_feet):
        """Sets the linear_feet of this GetRateJsonld.


        :param linear_feet: The linear_feet of this GetRateJsonld.  # noqa: E501
        :type: float
        """

        self._linear_feet = linear_feet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRateJsonld, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRateJsonld):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
