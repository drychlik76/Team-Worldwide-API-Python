# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetRateRateResponseTeamBookGetRateCreateCollectionGetRead(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unique_id': 'str',
        'quote_disclaimer': 'str',
        'vendors': 'list[str]',
        'rate_data_collection': 'list[RateDataTeamBookGetRateCreateCollectionGetRead]',
        'rate_no_data_collection': 'list[RateNoDataTeamBookGetRateCreateCollectionGetRead]',
        'accessorials': 'list[str]'
    }

    attribute_map = {
        'unique_id': 'uniqueId',
        'quote_disclaimer': 'quoteDisclaimer',
        'vendors': 'vendors',
        'rate_data_collection': 'rateDataCollection',
        'rate_no_data_collection': 'rateNoDataCollection',
        'accessorials': 'accessorials'
    }

    def __init__(self, unique_id=None, quote_disclaimer=None, vendors=None, rate_data_collection=None, rate_no_data_collection=None, accessorials=None):  # noqa: E501
        """GetRateRateResponseTeamBookGetRateCreateCollectionGetRead - a model defined in Swagger"""  # noqa: E501
        self._unique_id = None
        self._quote_disclaimer = None
        self._vendors = None
        self._rate_data_collection = None
        self._rate_no_data_collection = None
        self._accessorials = None
        self.discriminator = None
        if unique_id is not None:
            self.unique_id = unique_id
        if quote_disclaimer is not None:
            self.quote_disclaimer = quote_disclaimer
        if vendors is not None:
            self.vendors = vendors
        if rate_data_collection is not None:
            self.rate_data_collection = rate_data_collection
        if rate_no_data_collection is not None:
            self.rate_no_data_collection = rate_no_data_collection
        if accessorials is not None:
            self.accessorials = accessorials

    @property
    def unique_id(self):
        """Gets the unique_id of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501


        :return: The unique_id of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.


        :param unique_id: The unique_id of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def quote_disclaimer(self):
        """Gets the quote_disclaimer of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501


        :return: The quote_disclaimer of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :rtype: str
        """
        return self._quote_disclaimer

    @quote_disclaimer.setter
    def quote_disclaimer(self, quote_disclaimer):
        """Sets the quote_disclaimer of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.


        :param quote_disclaimer: The quote_disclaimer of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :type: str
        """

        self._quote_disclaimer = quote_disclaimer

    @property
    def vendors(self):
        """Gets the vendors of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501


        :return: The vendors of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.


        :param vendors: The vendors of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :type: list[str]
        """

        self._vendors = vendors

    @property
    def rate_data_collection(self):
        """Gets the rate_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501

        Rates from provider  # noqa: E501

        :return: The rate_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :rtype: list[RateDataTeamBookGetRateCreateCollectionGetRead]
        """
        return self._rate_data_collection

    @rate_data_collection.setter
    def rate_data_collection(self, rate_data_collection):
        """Sets the rate_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.

        Rates from provider  # noqa: E501

        :param rate_data_collection: The rate_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :type: list[RateDataTeamBookGetRateCreateCollectionGetRead]
        """

        self._rate_data_collection = rate_data_collection

    @property
    def rate_no_data_collection(self):
        """Gets the rate_no_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501

        No rates available from provider  # noqa: E501

        :return: The rate_no_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :rtype: list[RateNoDataTeamBookGetRateCreateCollectionGetRead]
        """
        return self._rate_no_data_collection

    @rate_no_data_collection.setter
    def rate_no_data_collection(self, rate_no_data_collection):
        """Sets the rate_no_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.

        No rates available from provider  # noqa: E501

        :param rate_no_data_collection: The rate_no_data_collection of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :type: list[RateNoDataTeamBookGetRateCreateCollectionGetRead]
        """

        self._rate_no_data_collection = rate_no_data_collection

    @property
    def accessorials(self):
        """Gets the accessorials of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501


        :return: The accessorials of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :rtype: list[str]
        """
        return self._accessorials

    @accessorials.setter
    def accessorials(self, accessorials):
        """Sets the accessorials of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.


        :param accessorials: The accessorials of this GetRateRateResponseTeamBookGetRateCreateCollectionGetRead.  # noqa: E501
        :type: list[str]
        """

        self._accessorials = accessorials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRateRateResponseTeamBookGetRateCreateCollectionGetRead, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRateRateResponseTeamBookGetRateCreateCollectionGetRead):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
