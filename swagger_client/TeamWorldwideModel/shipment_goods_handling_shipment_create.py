# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentGoodsHandlingShipmentCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'pieces': 'int',
        'weight': 'float',
        'height': 'float',
        'width': 'float',
        'length': 'float',
        'volume': 'float',
        'dimensional_weight': 'float',
        'container_type': 'str',
        'container_number': 'str',
        'seal_number': 'str'
    }

    attribute_map = {
        'description': 'description',
        'pieces': 'pieces',
        'weight': 'weight',
        'height': 'height',
        'width': 'width',
        'length': 'length',
        'volume': 'volume',
        'dimensional_weight': 'dimensionalWeight',
        'container_type': 'containerType',
        'container_number': 'containerNumber',
        'seal_number': 'sealNumber'
    }

    def __init__(self, description=None, pieces=None, weight=None, height=None, width=None, length=None, volume=None, dimensional_weight=None, container_type=None, container_number=None, seal_number=None):  # noqa: E501
        """ShipmentGoodsHandlingShipmentCreate - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._pieces = None
        self._weight = None
        self._height = None
        self._width = None
        self._length = None
        self._volume = None
        self._dimensional_weight = None
        self._container_type = None
        self._container_number = None
        self._seal_number = None
        self.discriminator = None
        self.description = description
        if pieces is not None:
            self.pieces = pieces
        if weight is not None:
            self.weight = weight
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if length is not None:
            self.length = length
        if volume is not None:
            self.volume = volume
        if dimensional_weight is not None:
            self.dimensional_weight = dimensional_weight
        if container_type is not None:
            self.container_type = container_type
        if container_number is not None:
            self.container_number = container_number
        if seal_number is not None:
            self.seal_number = seal_number

    @property
    def description(self):
        """Gets the description of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The description of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShipmentGoodsHandlingShipmentCreate.


        :param description: The description of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def pieces(self):
        """Gets the pieces of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The pieces of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: int
        """
        return self._pieces

    @pieces.setter
    def pieces(self, pieces):
        """Sets the pieces of this ShipmentGoodsHandlingShipmentCreate.


        :param pieces: The pieces of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: int
        """

        self._pieces = pieces

    @property
    def weight(self):
        """Gets the weight of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The weight of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ShipmentGoodsHandlingShipmentCreate.


        :param weight: The weight of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def height(self):
        """Gets the height of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The height of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ShipmentGoodsHandlingShipmentCreate.


        :param height: The height of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The width of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ShipmentGoodsHandlingShipmentCreate.


        :param width: The width of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def length(self):
        """Gets the length of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The length of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ShipmentGoodsHandlingShipmentCreate.


        :param length: The length of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def volume(self):
        """Gets the volume of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The volume of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ShipmentGoodsHandlingShipmentCreate.


        :param volume: The volume of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def dimensional_weight(self):
        """Gets the dimensional_weight of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The dimensional_weight of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._dimensional_weight

    @dimensional_weight.setter
    def dimensional_weight(self, dimensional_weight):
        """Sets the dimensional_weight of this ShipmentGoodsHandlingShipmentCreate.


        :param dimensional_weight: The dimensional_weight of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: float
        """

        self._dimensional_weight = dimensional_weight

    @property
    def container_type(self):
        """Gets the container_type of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The container_type of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this ShipmentGoodsHandlingShipmentCreate.


        :param container_type: The container_type of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: str
        """

        self._container_type = container_type

    @property
    def container_number(self):
        """Gets the container_number of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The container_number of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._container_number

    @container_number.setter
    def container_number(self, container_number):
        """Sets the container_number of this ShipmentGoodsHandlingShipmentCreate.


        :param container_number: The container_number of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: str
        """

        self._container_number = container_number

    @property
    def seal_number(self):
        """Gets the seal_number of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501


        :return: The seal_number of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._seal_number

    @seal_number.setter
    def seal_number(self, seal_number):
        """Sets the seal_number of this ShipmentGoodsHandlingShipmentCreate.


        :param seal_number: The seal_number of this ShipmentGoodsHandlingShipmentCreate.  # noqa: E501
        :type: str
        """

        self._seal_number = seal_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentGoodsHandlingShipmentCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentGoodsHandlingShipmentCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
