# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentBookingV2ShipmentBookingCreatedJsonld(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfShipmentBookingV2ShipmentBookingCreatedJsonldContext',
        'id': 'str',
        'type': 'str',
        'unique_id': 'str',
        'team_booking_number': 'str',
        'is_booked': 'bool',
        'shipments': 'list[ShipmentCreatedJsonld]',
        'booked': 'bool'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'unique_id': 'uniqueId',
        'team_booking_number': 'teamBookingNumber',
        'is_booked': 'isBooked',
        'shipments': 'shipments',
        'booked': 'booked'
    }

    def __init__(self, context=None, id=None, type=None, unique_id=None, team_booking_number=None, is_booked=True, shipments=None, booked=None):  # noqa: E501
        """ShipmentBookingV2ShipmentBookingCreatedJsonld - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._unique_id = None
        self._team_booking_number = None
        self._is_booked = None
        self._shipments = None
        self._booked = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if unique_id is not None:
            self.unique_id = unique_id
        if team_booking_number is not None:
            self.team_booking_number = team_booking_number
        if is_booked is not None:
            self.is_booked = is_booked
        if shipments is not None:
            self.shipments = shipments
        if booked is not None:
            self.booked = booked

    @property
    def context(self):
        """Gets the context of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The context of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: OneOfShipmentBookingV2ShipmentBookingCreatedJsonldContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param context: The context of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: OneOfShipmentBookingV2ShipmentBookingCreatedJsonldContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param id: The id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The type of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param type: The type of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def unique_id(self):
        """Gets the unique_id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The unique_id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param unique_id: The unique_id of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: str
        """

        self._unique_id = unique_id

    @property
    def team_booking_number(self):
        """Gets the team_booking_number of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The team_booking_number of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: str
        """
        return self._team_booking_number

    @team_booking_number.setter
    def team_booking_number(self, team_booking_number):
        """Sets the team_booking_number of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param team_booking_number: The team_booking_number of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: str
        """

        self._team_booking_number = team_booking_number

    @property
    def is_booked(self):
        """Gets the is_booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The is_booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: bool
        """
        return self._is_booked

    @is_booked.setter
    def is_booked(self, is_booked):
        """Sets the is_booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param is_booked: The is_booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: bool
        """

        self._is_booked = is_booked

    @property
    def shipments(self):
        """Gets the shipments of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The shipments of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: list[ShipmentCreatedJsonld]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param shipments: The shipments of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: list[ShipmentCreatedJsonld]
        """

        self._shipments = shipments

    @property
    def booked(self):
        """Gets the booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501


        :return: The booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :rtype: bool
        """
        return self._booked

    @booked.setter
    def booked(self, booked):
        """Sets the booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.


        :param booked: The booked of this ShipmentBookingV2ShipmentBookingCreatedJsonld.  # noqa: E501
        :type: bool
        """

        self._booked = booked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentBookingV2ShipmentBookingCreatedJsonld, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentBookingV2ShipmentBookingCreatedJsonld):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
