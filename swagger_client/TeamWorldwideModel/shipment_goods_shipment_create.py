# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShipmentGoodsShipmentCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'pieces': 'int',
        'length': 'float',
        'height': 'float',
        'width': 'float',
        'item_weight': 'float',
        'is_dangerous_goods': 'bool',
        'dangerous_goods_description': 'str',
        'package_type': 'str',
        'container_type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'pieces': 'pieces',
        'length': 'length',
        'height': 'height',
        'width': 'width',
        'item_weight': 'itemWeight',
        'is_dangerous_goods': 'isDangerousGoods',
        'dangerous_goods_description': 'dangerousGoodsDescription',
        'package_type': 'packageType',
        'container_type': 'containerType'
    }

    def __init__(self, description=None, pieces=1, length=None, height=None, width=None, item_weight=None, is_dangerous_goods=None, dangerous_goods_description=None, package_type=None, container_type=None):  # noqa: E501
        """ShipmentGoodsShipmentCreate - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._pieces = None
        self._length = None
        self._height = None
        self._width = None
        self._item_weight = None
        self._is_dangerous_goods = None
        self._dangerous_goods_description = None
        self._package_type = None
        self._container_type = None
        self.discriminator = None
        self.description = description
        self.pieces = pieces
        if length is not None:
            self.length = length
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if item_weight is not None:
            self.item_weight = item_weight
        self.is_dangerous_goods = is_dangerous_goods
        if dangerous_goods_description is not None:
            self.dangerous_goods_description = dangerous_goods_description
        self.package_type = package_type
        if container_type is not None:
            self.container_type = container_type

    @property
    def description(self):
        """Gets the description of this ShipmentGoodsShipmentCreate.  # noqa: E501


        :return: The description of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShipmentGoodsShipmentCreate.


        :param description: The description of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def pieces(self):
        """Gets the pieces of this ShipmentGoodsShipmentCreate.  # noqa: E501


        :return: The pieces of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: int
        """
        return self._pieces

    @pieces.setter
    def pieces(self, pieces):
        """Sets the pieces of this ShipmentGoodsShipmentCreate.


        :param pieces: The pieces of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: int
        """
        if pieces is None:
            raise ValueError("Invalid value for `pieces`, must not be `None`")  # noqa: E501

        self._pieces = pieces

    @property
    def length(self):
        """Gets the length of this ShipmentGoodsShipmentCreate.  # noqa: E501


        :return: The length of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ShipmentGoodsShipmentCreate.


        :param length: The length of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def height(self):
        """Gets the height of this ShipmentGoodsShipmentCreate.  # noqa: E501


        :return: The height of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ShipmentGoodsShipmentCreate.


        :param height: The height of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this ShipmentGoodsShipmentCreate.  # noqa: E501


        :return: The width of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ShipmentGoodsShipmentCreate.


        :param width: The width of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def item_weight(self):
        """Gets the item_weight of this ShipmentGoodsShipmentCreate.  # noqa: E501


        :return: The item_weight of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: float
        """
        return self._item_weight

    @item_weight.setter
    def item_weight(self, item_weight):
        """Sets the item_weight of this ShipmentGoodsShipmentCreate.


        :param item_weight: The item_weight of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: float
        """

        self._item_weight = item_weight

    @property
    def is_dangerous_goods(self):
        """Gets the is_dangerous_goods of this ShipmentGoodsShipmentCreate.  # noqa: E501

        Need to know if this a dangerous goods shipment  # noqa: E501

        :return: The is_dangerous_goods of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: bool
        """
        return self._is_dangerous_goods

    @is_dangerous_goods.setter
    def is_dangerous_goods(self, is_dangerous_goods):
        """Sets the is_dangerous_goods of this ShipmentGoodsShipmentCreate.

        Need to know if this a dangerous goods shipment  # noqa: E501

        :param is_dangerous_goods: The is_dangerous_goods of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: bool
        """
        if is_dangerous_goods is None:
            raise ValueError("Invalid value for `is_dangerous_goods`, must not be `None`")  # noqa: E501

        self._is_dangerous_goods = is_dangerous_goods

    @property
    def dangerous_goods_description(self):
        """Gets the dangerous_goods_description of this ShipmentGoodsShipmentCreate.  # noqa: E501

        If is dangerous goods, a description is required  # noqa: E501

        :return: The dangerous_goods_description of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._dangerous_goods_description

    @dangerous_goods_description.setter
    def dangerous_goods_description(self, dangerous_goods_description):
        """Sets the dangerous_goods_description of this ShipmentGoodsShipmentCreate.

        If is dangerous goods, a description is required  # noqa: E501

        :param dangerous_goods_description: The dangerous_goods_description of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: str
        """

        self._dangerous_goods_description = dangerous_goods_description

    @property
    def package_type(self):
        """Gets the package_type of this ShipmentGoodsShipmentCreate.  # noqa: E501

                   [P] Piece,           [G] Bag,           [B] Box,           [K] Case,           [T] Tube,           [C] Crate,           [L] Loose,           [E] Pallet,           [S] Skid,           [U] Tub,           [D] Drum,           [N] Container           # noqa: E501

        :return: The package_type of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this ShipmentGoodsShipmentCreate.

                   [P] Piece,           [G] Bag,           [B] Box,           [K] Case,           [T] Tube,           [C] Crate,           [L] Loose,           [E] Pallet,           [S] Skid,           [U] Tub,           [D] Drum,           [N] Container           # noqa: E501

        :param package_type: The package_type of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: str
        """
        if package_type is None:
            raise ValueError("Invalid value for `package_type`, must not be `None`")  # noqa: E501

        self._package_type = package_type

    @property
    def container_type(self):
        """Gets the container_type of this ShipmentGoodsShipmentCreate.  # noqa: E501

        Container Type  # noqa: E501

        :return: The container_type of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this ShipmentGoodsShipmentCreate.

        Container Type  # noqa: E501

        :param container_type: The container_type of this ShipmentGoodsShipmentCreate.  # noqa: E501
        :type: str
        """

        self._container_type = container_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShipmentGoodsShipmentCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShipmentGoodsShipmentCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
