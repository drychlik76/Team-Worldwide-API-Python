# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ShipmentV2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_get_shipment_status_collection(self, **kwargs):  # noqa: E501
        """Gets the shipment status by house bill.  # noqa: E501

        Retrieves the collection of GetShipmentStatus resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_shipment_status_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str house_bill:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_shipment_status_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_get_shipment_status_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_get_shipment_status_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the shipment status by house bill.  # noqa: E501

        Retrieves the collection of GetShipmentStatus resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_shipment_status_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str house_bill:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['house_bill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_shipment_status_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'house_bill' in params:
            query_params.append(('houseBill', params['house_bill']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/get-shipment-statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_house_bill_get_house_bill_collection(self, **kwargs):  # noqa: E501
        """Gets and Reserves a Team WorldWide HouseBill.  # noqa: E501

        Retrieves the collection of GetHouseBill resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_house_bill_get_house_bill_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_house_bill_get_house_bill_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_house_bill_get_house_bill_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_house_bill_get_house_bill_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Gets and Reserves a Team WorldWide HouseBill.  # noqa: E501

        Retrieves the collection of GetHouseBill resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_house_bill_get_house_bill_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_house_bill_get_house_bill_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/get-house-bill', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_shipment_booking_shipment_booking_v2_collection(self, body, **kwargs):  # noqa: E501
        """Book shipments to Team Worldwide.  # noqa: E501

        Creates a ShipmentBookingV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_booking_shipment_booking_v2_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentBookingV2JsonldShipmentBookingCreate body: The new ShipmentBookingV2 resource (required)
        :return: ShipmentBookingV2ShipmentBookingCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Book shipments to Team Worldwide.  # noqa: E501

        Creates a ShipmentBookingV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentBookingV2JsonldShipmentBookingCreate body: The new ShipmentBookingV2 resource (required)
        :return: ShipmentBookingV2ShipmentBookingCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_shipment_booking_shipment_booking_v2_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_create_shipment_booking_shipment_booking_v2_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/create/shipmentBooking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentBookingV2ShipmentBookingCreatedJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_shipment_booking_shipment_booking_v2_collection(self, body, **kwargs):  # noqa: E501
        """Book shipments to Team Worldwide.  # noqa: E501

        Creates a ShipmentBookingV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_booking_shipment_booking_v2_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentBookingV2JsonldShipmentBookingCreate body: The new ShipmentBookingV2 resource (required)
        :return: ShipmentBookingV2ShipmentBookingCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Book shipments to Team Worldwide.  # noqa: E501

        Creates a ShipmentBookingV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_booking_shipment_booking_v2_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentBookingV2JsonldShipmentBookingCreate body: The new ShipmentBookingV2 resource (required)
        :return: ShipmentBookingV2ShipmentBookingCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_shipment_booking_shipment_booking_v2_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_create_shipment_booking_shipment_booking_v2_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/create/shipmentBooking', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentBookingV2ShipmentBookingCreatedJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_shipment_shipment_v2_collection(self, body, **kwargs):  # noqa: E501
        """Book a single shipment to Team Worldwide.  # noqa: E501

        Creates a ShipmentV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_shipment_v2_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentV2ShipmentJsonldShipmentCreate body: The new ShipmentV2 resource (required)
        :return: ShipmentV2ShipmentCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_shipment_shipment_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_create_shipment_shipment_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_create_shipment_shipment_v2_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Book a single shipment to Team Worldwide.  # noqa: E501

        Creates a ShipmentV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_shipment_v2_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentV2ShipmentJsonldShipmentCreate body: The new ShipmentV2 resource (required)
        :return: ShipmentV2ShipmentCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_shipment_shipment_v2_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_create_shipment_shipment_v2_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/create/shipment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentV2ShipmentCreatedJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_create_shipment_shipment_v2_collection(self, body, **kwargs):  # noqa: E501
        """Book a single shipment to Team Worldwide.  # noqa: E501

        Creates a ShipmentV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_shipment_v2_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentV2ShipmentJsonldShipmentCreate body: The new ShipmentV2 resource (required)
        :return: ShipmentV2ShipmentCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_create_shipment_shipment_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_create_shipment_shipment_v2_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_create_shipment_shipment_v2_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Book a single shipment to Team Worldwide.  # noqa: E501

        Creates a ShipmentV2 resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_create_shipment_shipment_v2_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentV2ShipmentJsonldShipmentCreate body: The new ShipmentV2 resource (required)
        :return: ShipmentV2ShipmentCreatedJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_create_shipment_shipment_v2_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_create_shipment_shipment_v2_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/create/shipment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentV2ShipmentCreatedJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_add_new_shipment_note_shipment_note_resource_item(self, body, house_bill, **kwargs):  # noqa: E501
        """Add Shipment Note.  # noqa: E501

        Replaces the ShipmentNoteResource resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_add_new_shipment_note_shipment_note_resource_item(body, house_bill, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentNoteResourceJsonldShipmentNoteResourceJsonldShipmentCreate body: The updated ShipmentNoteResource resource (required)
        :param str house_bill: Resource identifier (required)
        :return: ShipmentNoteResourceJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_add_new_shipment_note_shipment_note_resource_item_with_http_info(body, house_bill, **kwargs)  # noqa: E501
        else:
            (data) = self.put_add_new_shipment_note_shipment_note_resource_item_with_http_info(body, house_bill, **kwargs)  # noqa: E501
            return data

    def put_add_new_shipment_note_shipment_note_resource_item_with_http_info(self, body, house_bill, **kwargs):  # noqa: E501
        """Add Shipment Note.  # noqa: E501

        Replaces the ShipmentNoteResource resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_add_new_shipment_note_shipment_note_resource_item_with_http_info(body, house_bill, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentNoteResourceJsonldShipmentNoteResourceJsonldShipmentCreate body: The updated ShipmentNoteResource resource (required)
        :param str house_bill: Resource identifier (required)
        :return: ShipmentNoteResourceJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'house_bill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_add_new_shipment_note_shipment_note_resource_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_add_new_shipment_note_shipment_note_resource_item`")  # noqa: E501
        # verify the required parameter 'house_bill' is set
        if ('house_bill' not in params or
                params['house_bill'] is None):
            raise ValueError("Missing the required parameter `house_bill` when calling `put_add_new_shipment_note_shipment_note_resource_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'house_bill' in params:
            path_params['houseBill'] = params['house_bill']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/create/new/{houseBill}/note', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentNoteResourceJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_add_new_shipment_note_shipment_note_resource_item(self, body, house_bill, **kwargs):  # noqa: E501
        """Add Shipment Note.  # noqa: E501

        Replaces the ShipmentNoteResource resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_add_new_shipment_note_shipment_note_resource_item(body, house_bill, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentNoteResourceJsonldShipmentNoteResourceJsonldShipmentCreate body: The updated ShipmentNoteResource resource (required)
        :param str house_bill: Resource identifier (required)
        :return: ShipmentNoteResourceJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_add_new_shipment_note_shipment_note_resource_item_with_http_info(body, house_bill, **kwargs)  # noqa: E501
        else:
            (data) = self.put_add_new_shipment_note_shipment_note_resource_item_with_http_info(body, house_bill, **kwargs)  # noqa: E501
            return data

    def put_add_new_shipment_note_shipment_note_resource_item_with_http_info(self, body, house_bill, **kwargs):  # noqa: E501
        """Add Shipment Note.  # noqa: E501

        Replaces the ShipmentNoteResource resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_add_new_shipment_note_shipment_note_resource_item_with_http_info(body, house_bill, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ShipmentNoteResourceJsonldShipmentNoteResourceJsonldShipmentCreate body: The updated ShipmentNoteResource resource (required)
        :param str house_bill: Resource identifier (required)
        :return: ShipmentNoteResourceJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'house_bill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_add_new_shipment_note_shipment_note_resource_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_add_new_shipment_note_shipment_note_resource_item`")  # noqa: E501
        # verify the required parameter 'house_bill' is set
        if ('house_bill' not in params or
                params['house_bill'] is None):
            raise ValueError("Missing the required parameter `house_bill` when calling `put_add_new_shipment_note_shipment_note_resource_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'house_bill' in params:
            path_params['houseBill'] = params['house_bill']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/create/new/{houseBill}/note', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ShipmentNoteResourceJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_update_team_booking_update_team_booking_item(self, body, team_booking_number, **kwargs):  # noqa: E501
        """Update Booking.  # noqa: E501

        Updates the UpdateTeamBooking resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_update_team_booking_update_team_booking_item(body, team_booking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTeamBookingUpdateTeamBooking body: The updated UpdateTeamBooking resource (required)
        :param str team_booking_number: Resource identifier (required)
        :return: UpdateTeamBookingJsonldGetShipmentBookingCollectionGetRead
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_update_team_booking_update_team_booking_item_with_http_info(body, team_booking_number, **kwargs)  # noqa: E501
        else:
            (data) = self.put_update_team_booking_update_team_booking_item_with_http_info(body, team_booking_number, **kwargs)  # noqa: E501
            return data

    def put_update_team_booking_update_team_booking_item_with_http_info(self, body, team_booking_number, **kwargs):  # noqa: E501
        """Update Booking.  # noqa: E501

        Updates the UpdateTeamBooking resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_update_team_booking_update_team_booking_item_with_http_info(body, team_booking_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateTeamBookingUpdateTeamBooking body: The updated UpdateTeamBooking resource (required)
        :param str team_booking_number: Resource identifier (required)
        :return: UpdateTeamBookingJsonldGetShipmentBookingCollectionGetRead
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'team_booking_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_update_team_booking_update_team_booking_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_update_team_booking_update_team_booking_item`")  # noqa: E501
        # verify the required parameter 'team_booking_number' is set
        if ('team_booking_number' not in params or
                params['team_booking_number'] is None):
            raise ValueError("Missing the required parameter `team_booking_number` when calling `put_update_team_booking_update_team_booking_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_booking_number' in params:
            path_params['teamBookingNumber'] = params['team_booking_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/merge-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/update/updateShipmentBooking/{teamBookingNumber}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateTeamBookingJsonldGetShipmentBookingCollectionGetRead',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
