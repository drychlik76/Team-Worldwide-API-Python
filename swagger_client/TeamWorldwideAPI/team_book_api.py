# coding: utf-8

"""
    Team Worldwide API 2022

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TeamBookApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_get_accessorials_collection(self, **kwargs):  # noqa: E501
        """Get TeamBook accessorials.  # noqa: E501

        Retrieves the collection of GetAccessorials resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_accessorials_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_accessorials_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_get_accessorials_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_get_accessorials_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Get TeamBook accessorials.  # noqa: E501

        Retrieves the collection of GetAccessorials resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_accessorials_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_accessorials_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/team-book/get-accessorials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_quote_item(self, rate_id, **kwargs):  # noqa: E501
        """Get a Quote along with a reserved house bill.  Use a rateId from get-rates endpoint.  # noqa: E501

        Retrieves a GetQuote resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_quote_item(rate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rate_id: Resource identifier (required)
        :return: GetQuoteQuoteResponseJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_quote_item_with_http_info(rate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_quote_item_with_http_info(rate_id, **kwargs)  # noqa: E501
            return data

    def get_get_quote_item_with_http_info(self, rate_id, **kwargs):  # noqa: E501
        """Get a Quote along with a reserved house bill.  Use a rateId from get-rates endpoint.  # noqa: E501

        Retrieves a GetQuote resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_quote_item_with_http_info(rate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str rate_id: Resource identifier (required)
        :return: GetQuoteQuoteResponseJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_quote_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rate_id' is set
        if ('rate_id' not in params or
                params['rate_id'] is None):
            raise ValueError("Missing the required parameter `rate_id` when calling `get_get_quote_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rate_id' in params:
            path_params['rateId'] = params['rate_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/team-book/get-quote/{rateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetQuoteQuoteResponseJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_rate_collection(self, origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, **kwargs):  # noqa: E501
        """Get rates from the Team Book System.  # noqa: E501

        Retrieves the collection of GetRate resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_rate_collection(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str origin_city: (required)
        :param str origin_state: (required)
        :param str origin_zip_code: (required)
        :param str origin_country: (required)
        :param str destination_city: (required)
        :param str destination_state: (required)
        :param str destination_zip_code: (required)
        :param str destination_country: (required)
        :param str unit_of_measure: Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms) (required)
        :param str pickup_date: Pickup Date. Format: YYYY-MM-DD
        :param bool insurance_add_on: Option to add 10% to the insurance value
        :param bool insure_freight: Used to tell the API to quote insurance. Your account must be setup for quoting insurance.
        :param float insurance_amount: This parameter refers to the extra value of 'Money' type accessorials like declared value.
        :param float linear_feet: Linear feet value. Helpful for some volume vendors to return a rate based on space needed in a truck.
        :param str equipment: Used for volume vendors and rates they return. Valid values: All, Van, Flatbed
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_rate_collection_with_http_info(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, **kwargs)  # noqa: E501
        else:
            (data) = self.get_get_rate_collection_with_http_info(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, **kwargs)  # noqa: E501
            return data

    def get_get_rate_collection_with_http_info(self, origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, **kwargs):  # noqa: E501
        """Get rates from the Team Book System.  # noqa: E501

        Retrieves the collection of GetRate resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_rate_collection_with_http_info(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str origin_city: (required)
        :param str origin_state: (required)
        :param str origin_zip_code: (required)
        :param str origin_country: (required)
        :param str destination_city: (required)
        :param str destination_state: (required)
        :param str destination_zip_code: (required)
        :param str destination_country: (required)
        :param str unit_of_measure: Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms) (required)
        :param str pickup_date: Pickup Date. Format: YYYY-MM-DD
        :param bool insurance_add_on: Option to add 10% to the insurance value
        :param bool insure_freight: Used to tell the API to quote insurance. Your account must be setup for quoting insurance.
        :param float insurance_amount: This parameter refers to the extra value of 'Money' type accessorials like declared value.
        :param float linear_feet: Linear feet value. Helpful for some volume vendors to return a rate based on space needed in a truck.
        :param str equipment: Used for volume vendors and rates they return. Valid values: All, Van, Flatbed
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['origin_city', 'origin_state', 'origin_zip_code', 'origin_country', 'destination_city', 'destination_state', 'destination_zip_code', 'destination_country', 'unit_of_measure', 'pickup_date', 'insurance_add_on', 'insure_freight', 'insurance_amount', 'linear_feet', 'equipment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_rate_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'origin_city' is set
        if ('origin_city' not in params or
                params['origin_city'] is None):
            raise ValueError("Missing the required parameter `origin_city` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'origin_state' is set
        if ('origin_state' not in params or
                params['origin_state'] is None):
            raise ValueError("Missing the required parameter `origin_state` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'origin_zip_code' is set
        if ('origin_zip_code' not in params or
                params['origin_zip_code'] is None):
            raise ValueError("Missing the required parameter `origin_zip_code` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'origin_country' is set
        if ('origin_country' not in params or
                params['origin_country'] is None):
            raise ValueError("Missing the required parameter `origin_country` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'destination_city' is set
        if ('destination_city' not in params or
                params['destination_city'] is None):
            raise ValueError("Missing the required parameter `destination_city` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'destination_state' is set
        if ('destination_state' not in params or
                params['destination_state'] is None):
            raise ValueError("Missing the required parameter `destination_state` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'destination_zip_code' is set
        if ('destination_zip_code' not in params or
                params['destination_zip_code'] is None):
            raise ValueError("Missing the required parameter `destination_zip_code` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'destination_country' is set
        if ('destination_country' not in params or
                params['destination_country'] is None):
            raise ValueError("Missing the required parameter `destination_country` when calling `get_get_rate_collection`")  # noqa: E501
        # verify the required parameter 'unit_of_measure' is set
        if ('unit_of_measure' not in params or
                params['unit_of_measure'] is None):
            raise ValueError("Missing the required parameter `unit_of_measure` when calling `get_get_rate_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'origin_city' in params:
            query_params.append(('originCity', params['origin_city']))  # noqa: E501
        if 'origin_state' in params:
            query_params.append(('originState', params['origin_state']))  # noqa: E501
        if 'origin_zip_code' in params:
            query_params.append(('originZipCode', params['origin_zip_code']))  # noqa: E501
        if 'origin_country' in params:
            query_params.append(('originCountry', params['origin_country']))  # noqa: E501
        if 'destination_city' in params:
            query_params.append(('destinationCity', params['destination_city']))  # noqa: E501
        if 'destination_state' in params:
            query_params.append(('destinationState', params['destination_state']))  # noqa: E501
        if 'destination_zip_code' in params:
            query_params.append(('destinationZipCode', params['destination_zip_code']))  # noqa: E501
        if 'destination_country' in params:
            query_params.append(('destinationCountry', params['destination_country']))  # noqa: E501
        if 'unit_of_measure' in params:
            query_params.append(('unitOfMeasure', params['unit_of_measure']))  # noqa: E501
        if 'pickup_date' in params:
            query_params.append(('pickupDate', params['pickup_date']))  # noqa: E501
        if 'insurance_add_on' in params:
            query_params.append(('insuranceAddOn', params['insurance_add_on']))  # noqa: E501
        if 'insure_freight' in params:
            query_params.append(('insureFreight', params['insure_freight']))  # noqa: E501
        if 'insurance_amount' in params:
            query_params.append(('insuranceAmount', params['insurance_amount']))  # noqa: E501
        if 'linear_feet' in params:
            query_params.append(('linearFeet', params['linear_feet']))  # noqa: E501
        if 'equipment' in params:
            query_params.append(('equipment', params['equipment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/team-book/get-rates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_get_shipment_status_collection(self, **kwargs):  # noqa: E501
        """Gets the shipment status by house bill.  # noqa: E501

        Retrieves the collection of GetShipmentStatus resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_shipment_status_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str house_bill:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_get_shipment_status_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_get_shipment_status_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_get_shipment_status_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the shipment status by house bill.  # noqa: E501

        Retrieves the collection of GetShipmentStatus resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_get_shipment_status_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str house_bill:
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['house_bill']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get_shipment_status_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'house_bill' in params:
            query_params.append(('houseBill', params['house_bill']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/teamww/get-shipment-statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_book_shipment_collection(self, body, **kwargs):  # noqa: E501
        """Book and dispatch a shipment in the TeamBook system.  # noqa: E501

        Creates a BookShipment resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_book_shipment_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BookShipmentJsonldTeamBookShipmentCreate body: The new BookShipment resource (required)
        :return: BookShipmentTeamBookResponseJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_book_shipment_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_book_shipment_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_book_shipment_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Book and dispatch a shipment in the TeamBook system.  # noqa: E501

        Creates a BookShipment resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_book_shipment_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BookShipmentJsonldTeamBookShipmentCreate body: The new BookShipment resource (required)
        :return: BookShipmentTeamBookResponseJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_book_shipment_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_book_shipment_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/team-book/book-shipment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BookShipmentTeamBookResponseJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_book_shipment_collection(self, body, **kwargs):  # noqa: E501
        """Book and dispatch a shipment in the TeamBook system.  # noqa: E501

        Creates a BookShipment resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_book_shipment_collection(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BookShipmentJsonldTeamBookShipmentCreate body: The new BookShipment resource (required)
        :return: BookShipmentTeamBookResponseJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_book_shipment_collection_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_book_shipment_collection_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_book_shipment_collection_with_http_info(self, body, **kwargs):  # noqa: E501
        """Book and dispatch a shipment in the TeamBook system.  # noqa: E501

        Creates a BookShipment resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_book_shipment_collection_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BookShipmentJsonldTeamBookShipmentCreate body: The new BookShipment resource (required)
        :return: BookShipmentTeamBookResponseJsonld
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_book_shipment_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_book_shipment_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/team-book/book-shipment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BookShipmentTeamBookResponseJsonld',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
